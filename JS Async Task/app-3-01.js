async function fetchWithAbort() {
  console.log("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");

  let controller = new AbortController();
  setTimeout(() => {
    controller.abort();
    console.log("–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞");
  }, 10000);

  try {
    let response = await fetch("https://jsonplaceholder.typicode.com/ughjksers", {
      signal: controller.signal,
    });

    const responseJson = await response.json();

    return console.log("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:", responseJson);
  } catch (err) {
    if (err.name === "AbortError") {
      console.log("–ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω!");
    } else {
      console.log("–û—à–∏–±–∫–∞:", err.message);
    }
  }
}

// fetchWithAbort(); // —Ç—É—Ç —è —Å–¥–∞–ª—Å—è

// async function fetchWithAbort() {
//   console.log("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
//
//   const controller = new AbortController();
//   const signal = controller.signal;
//
//   // –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É —á–µ—Ä–µ–∑ 100 –º—Å
//   setTimeout(() => {
//     controller.abort();
//     console.log("–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞");
//   }, 100);
//
//   try {
//     const response = await fetch("https://jsonplaceholder.typicode.com/users", {
//       signal: signal,
//     });
//     const data = await response.json();
//     console.log("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:", data);
//   } catch (err) {
//     if (err.name === "AbortError") {
//       console.log("–ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω!");
//     } else {
//       console.log("–û—à–∏–±–∫–∞:", err.message);
//     }
//   }
// }

fetchWithAbort();


// –í—Å–µ —Ñ–∞–π–Ω üòÑ GPT —Ä–µ—à–∏–ª –∑–∞ —Ç–µ–±—è?)